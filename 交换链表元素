Given a linked list, swap every two adjacent nodes and return its head.

For example,
Given 1->2->3->4, you should return the list as 2->1->4->3.

Your algorithm should use only constant space. You may not modify the values in the list, only nodes itself can be changed.





/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */

struct ListNode* swapPairs(struct ListNode* head) {
    struct ListNode* one = head;
    int temp;
    
    while(one != NULL)
    {
        temp = (*one).val;
        
        if(one->next == NULL){break;}//链表的单复数不一样会导致访问的空间不存在，
                                       并且由于接下来有下一个节点的赋值，所以需要先进行判断
                                       **想好会如何开始，以及如何结束
        (*one).val = (*(one->next)).val;
        (*(one->next)).val = temp;
        one = one->next->next;
    }
    return head;
}
